#include <stdio.h>
#include <stdlib.h>
#include "maze.h"

Maze* malloc_maze(int num_rows, int num_cols){
	Maze *maze = malloc(sizeof(Maze));
	maze->num_rows = num_rows;
	maze->num_cols = num_cols;
	maze->cells = malloc(num_rows * sizeof(char));
	for (int i = 0;i < num_rows;i++){
		*(maze->cells + i) = malloc(num_cols * sizeof(char*));
	}
	return maze;
}

void free_maze(Maze* maze){
	for (int i = 0;i < maze->num_rows;i++){
		free(*(maze->cells + i));
	}
	free(maze->cells);
	free(maze);
}

Maze* read_maze(FILE* fp){
	Maze* maze;
	int num_rows = 0,num_cols = 0;
	int r = 0,c = 0;
	char text,a;
	fseek(fp,0,SEEK_SET);
	int size = 0;
	while (!feof(fp)){
		text = fgetc(fp);
		if (text == '\n'){
			num_rows++;
		}
		if (text != EOF && text != '\n'){
			size++;
		}
	}
	num_cols = size / num_rows;
	maze = malloc_maze(num_rows,num_cols);
	while ((a = fgetc(fp)) != EOF){
		if (a == '\n'){
			r++;
			c = 0;
			continue;
		}
		*(*((maze->cells) + r) + c) = a;
		c++;
	}	
	return maze;
}

bool write_maze(const char* filename,const Maze* maze){
  FILE * text = fopen(filename,"w");
  for(int i = 0;i < maze->num_rows;i++){
    for(int j = 0; j < maze->num_cols;j++){   
      if(fputc(*(*((maze->cells) + i) + j),filename)==0){
	fclose(text);
	return false;     
    }
      if(fputc('\n',filename) == 0){
	fclose(text);
	return false;
      }
  }
    fclose(text);
    return true;
}

Maze* make_taller(const Maze* orig){
  Maze* taller;
  int i = 0,j = 0;
  taller->num_rows = orig->num_rows;
  taller->num_cols = 2 * (orig->num_cols) - 1;
  malloc_maze(taller->num_rows,taller->num_cols);
  for (i = 0; i < maze->num_rows; i++){
    for(j = 0; j < maze->num_cols;j++){
      *(*((taller->cells) + i) + j) =  *(*((maze->cells) + i) + j);
    }
  }
  
  for (i;i < taller->num_rows;i++){
    for(j = 0; j < taller->num_cols;j++){
      *(*((taller->cells) + i) + j) =  *(*((maze->cells) + (maze->num_rows) - i - 1) + j);
    }      
  }
  return taller;
}


Maze* make_wider(const Maze* orig){
  Maze* wider;
  int i = 0,j = 0;
  wider->num_rows = 2 * (orig->num_rows) - 1;
  wider->num_cols = orig->num_cols;
  malloc_maze(wider->num_rows,wider->num_cols);
  for (i = 0; i < maze->num_cols; i++){
    for(j = 0; j < maze->num_rows;j++){
      *(*((taller->cells) + i) + j) =  *(*((maze->cells) + i) + j);
    }
  }
  
  for (i;i < taller->num_cols;i++){
    for(j = 0; j < taller->num_rows;j++){
      *(*((taller->cells) + i) + j) =  *(*((maze->cells) + i) + (maze->num_cols) - j - 1);
    }      
  }
}
 i = (maze->num_rows + 1) / 2;
 j = (maze->num_cols + 1) / 2;
 if (maze->cells[i][j] == PATH){
       return wider;
 } 
 else{ 
     for(j = j; j > 0; j--){
	 if (maze->cells[i-1][j+1] == PATH || maze->cells[i-1][j-1] == PATH){
	   maze->cells[i][j+1] = PATH;
	   maze->cells[i][j-1] = PATH;
	   maze->cells[i][j] = PATH;
	   return wider;
	   break;
	 }
	 else if(maze->cells[i][j-1] == PATH){
	   return wider;
	   break;
	 }
	 else{   
	   maze->cells[i][j-1] = PATH;
	   maze->cells[i][j+1] = PATH;
	 }
     }
 }
